[{"C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\index.js":"1","C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\App.js":"2","C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\serviceWorker.js":"3","C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\requests.js":"4","C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\Row.js":"5","C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\Nav.js":"6","C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\Banner.js":"7","C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\axios.js":"8"},{"size":504,"mtime":1609411856710,"results":"9","hashOfConfig":"10"},{"size":917,"mtime":1609411692683,"results":"11","hashOfConfig":"10"},{"size":5481,"mtime":1609412075122,"results":"12","hashOfConfig":"10"},{"size":792,"mtime":1609412037207,"results":"13","hashOfConfig":"10"},{"size":2003,"mtime":1609433126285,"results":"14","hashOfConfig":"10"},{"size":804,"mtime":1609423873956,"results":"15","hashOfConfig":"10"},{"size":1586,"mtime":1609411788664,"results":"16","hashOfConfig":"10"},{"size":136,"mtime":1609411730164,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"53yt2y",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\index.js",[],["37","38"],"C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\App.js",[],"C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\serviceWorker.js",[],"C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\requests.js",[],"C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\Row.js",["39","40"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport ScrollContainer from \"react-indiana-drag-scroll\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  const youtubeOpts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const movieClicked = (moviename) => {\r\n    console.log(moviename);\r\n    if (trailerUrl != \"\") setTrailerUrl(\"\");\r\n    else {\r\n      movieTrailer(moviename)\r\n        .then((url) => {\r\n          const urlParamV = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParamV.get(\"v\"));\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  };\r\n  console.log(\"movie list\",movies);\r\n  return (\r\n      \r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <ScrollContainer className=\"row__posters\">\r\n        {/* <div className=\"row__posters\"> */}\r\n        {movies.map((movie) => (\r\n          <img\r\n            onClick={() =>\r\n              movieClicked(movie.name || movie.title || movie.orginal_name)\r\n            }\r\n            key={movie.id}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} //use && if theres no else or : otherwise use ?\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n        {/* </div> */}\r\n      </ScrollContainer>\r\n      {trailerUrl != \"\" && <YouTube videoId={trailerUrl} opts={youtubeOpts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;","C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\Nav.js",["41","42"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Nav.css\";\r\nfunction Nav() {\r\n  const [navbarBlack, setNavbarBlack] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      setNavbarBlack(true);\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n  return (\r\n    <nav className={`${navbarBlack && \"nav__black\"}`}>\r\n      <div className=\"nav__contents\">\r\n        <img\r\n          className=\"nav__logo\"\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\r\n        />\r\n        <img\r\n          className=\"nav__avatar\"\r\n          src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n        />\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;","C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\Banner.js",[],"C:\\Users\\Rajveer\\rajjo-ka-app\\netflix\\src\\axios.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":28,"column":20,"nodeType":"49","messageId":"50","endLine":28,"endColumn":22},{"ruleId":"47","severity":1,"message":"48","line":60,"column":19,"nodeType":"49","messageId":"50","endLine":60,"endColumn":21},{"ruleId":"51","severity":1,"message":"52","line":16,"column":9,"nodeType":"53","endLine":19,"endColumn":11},{"ruleId":"51","severity":1,"message":"52","line":20,"column":9,"nodeType":"53","endLine":23,"endColumn":11},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]